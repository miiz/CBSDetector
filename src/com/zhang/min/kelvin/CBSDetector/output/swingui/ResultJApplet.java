/*
 * ResultJFrame.java
 *
 * Created on 19 August 2008, 14:09
 */

package com.zhang.min.kelvin.CBSDetector.output.swingui;

import java.util.*;

import javax.swing.border.EmptyBorder;
import javax.swing.tree.*;
import com.zhang.min.kelvin.CBSDetector.core.DetectResult;
import com.zhang.min.kelvin.CBSDetector.output.DetectorOutput;

/**
 *
 * @author  Min Zhang
 */
public class ResultJApplet extends javax.swing.JApplet implements DetectorOutput{

	/**
	 * 
	 */
	private static final long serialVersionUID = -78225795592517835L;

    private int totalFile=0;

	/** Creates new form ResultJFrame */
    public ResultJApplet() {
        initComponents();
        clear();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
    	jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        
        jSplitPane1.setBorder(new EmptyBorder(0,0,0,0));
        jScrollPane1.setBorder(new EmptyBorder(0,0,0,0));
        jScrollPane2.setBorder(new EmptyBorder(0,0,0,0));
        jTextPane1.setBorder(new EmptyBorder(0,0,0,0));

        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        jSplitPane1.setDividerLocation(250);
        
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);
        jSplitPane1.setLeftComponent(jScrollPane1);
        jScrollPane2.setViewportView(jTextPane1);
        jSplitPane1.setRightComponent(jScrollPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText(" ");
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
        
        //pack();
    }// </editor-fold>//GEN-END:initComponents
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    
    private DefaultMutableTreeNode rootNode;
    
    public void addDetectorResults(String name,List<DetectResult> results){
    	String beVar="contain";
    	String multi="files";
    	if(results.size()<=1){
    		beVar="contains";
    		multi="file";
    	}
    	DefaultMutableTreeNode newNode=new DefaultMutableTreeNode(results.size()+" "
    											+multi+" "+beVar+" "+name);
    	rootNode.add(newNode);
    	totalFile=totalFile+results.size();
    	
    	Iterator<DetectResult> resultI=results.iterator();
		while(resultI.hasNext()){
			DetectResult dr=resultI.next();
			DefaultMutableTreeNode newChildNode=new DefaultMutableTreeNode(dr);
			newNode.add(newChildNode);
		}
    }
    
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {
    	TreePath selPath = jTree1.getPathForLocation(evt.getX(), evt.getY());
    	if(selPath!=null){
	    	DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)selPath.getLastPathComponent();
	    	
	    	if(treeNode.getUserObject() instanceof DetectResult){
	    		DetectResult dr = (DetectResult)treeNode.getUserObject();
	    		jTextPane1.setText("Bad Smell is found in:\n"
	    				+dr.getMessages().getAllMessages());
	    	}
    	}
    }
    
    /*public void output(){
    	//java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
            	_output();
        //    }
        //});
    }*/
    
    public void output(){
    	jTree1.expandRow(0);
    	jTree1.repaint();
    	jLabel1.setText("Total Number of Files Containing Code Bad Smells: "
    			+totalFile);
    	setVisible(true);
    }
    
    public void clear(){
    	totalFile=0;
        DefaultTreeModel dtm=(DefaultTreeModel)jTree1.getModel();
        rootNode=new DefaultMutableTreeNode("Results",true);
        dtm.setRoot(rootNode);
    }
    
    /*public int calculateLeaf(TreeNode node){
    	int result=0;
    	for(int i=0;i<node.getChildCount();i++){
    		TreeNode childNode=node.getChildAt(i);
    		if(childNode.isLeaf()){
    			result++;
    		}else{
    			result=result+calculateLeaf(childNode);
    		}
    	}
    	return result;
    }*/
}
